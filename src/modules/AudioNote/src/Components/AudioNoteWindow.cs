// Copyright © Plain Concepts S.L.U. All rights reserved. Use is subject to license terms.
// <auto-generated />

using Evergine.Components.Fonts;
using Evergine.Framework;
using Evergine.Mathematics;
using Evergine.MRTK.SDK.Features.UX.Components.PressableButtons;
using Evergine.MRTK.SDK.Features.UX.Components.ToggleButtons;
using Evergine.Platform;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Xrv.AudioNote.Messages;
using Xrv.AudioNote.Models;
using Xrv.AudioNote.Services;
using Xrv.Core;
using Xrv.Core.UI.Dialogs;

namespace Xrv.AudioNote
{
    public enum AudioNoteWindowState
    {
        None,
        Recording,
        Playing,
        StopPlaying,
        StopRecording,
        ReadyToPlay,
    }

    public class AudioNoteWindow : Component
    {
        private AudioNoteWindowState windowState;
        private AudioNoteData data;

        [BindService]
        protected XrvService xrvService;

        [BindService]
        protected PlaybackService playbackService;

        [BindService]
        protected RecordingService recordingService;

        [BindEntity(source: BindEntitySource.Children, tag: "Recording")]
        protected Entity recordingEntity;

        [BindEntity(source: BindEntitySource.Children, tag: "Playing")]
        protected Entity playingEntity;

        [BindEntity(source: BindEntitySource.Children, tag: "Record", isRecursive: true)]
        protected Entity recordEntity;

        [BindEntity(source: BindEntitySource.Children, tag: "Play", isRecursive: true)]
        protected Entity playEntity;

        [BindEntity(source: BindEntitySource.Children, tag: "Delete", isRecursive: true)]
        protected Entity deleteEntity;

        [BindComponent(source: BindComponentSource.Children, tag: "Time")]
        protected Text3DMesh recordedTimeText;

        [BindComponent(source: BindComponentSource.Children, tag: "Total")]
        protected Text3DMesh playTotalText;

        [BindComponent(source: BindComponentSource.Children, tag: "Current")]
        protected Text3DMesh playCurrentText;

        protected PressableButton playButton;
        protected PressableButton recordButton;
        protected PressableButton deleteButton;
        protected ToggleStateManager recordManager;
        protected ToggleStateManager playManager;

        public AudioNoteData Data { get => data; set => data = value; }

        public AudioNoteWindowState WindowState
        {
            get => windowState;
            set
            {
                windowState = value;
                if (this.IsAttached)
                {
                    this.UpdateWindowState(windowState);
                }
            }
        }

        protected override bool OnAttached()
        {
            if (!base.OnAttached()) return false;
            if (Application.Current.IsEditor) return true;

            this.playButton = this.playEntity.FindComponentInChildren<PressableButton>();
            this.recordButton = this.recordEntity.FindComponentInChildren<PressableButton>();
            this.deleteButton = this.deleteEntity.FindComponentInChildren<PressableButton>();

            this.playManager = this.playEntity.FindComponentInChildren<ToggleStateManager>();
            this.recordManager = this.recordEntity.FindComponentInChildren<ToggleStateManager>();

            this.playingEntity.IsEnabled = false;
            this.recordingEntity.IsEnabled = false;

            this.deleteButton.ButtonReleased += this.DeleteButton_ButtonReleased;
            this.playButton.ButtonReleased += this.PlayButton_ButtonReleased;
            this.recordButton.ButtonReleased += this.RecordButton_ButtonReleased;

            this.playbackService.CurrentPosition += PlaybackService_CurrentPosition;
            this.playbackService.AudioEnd += PlaybackService_AudioEnd;

            this.recordingService.RecordingTimeChanged += RecordingService_RecordingTimeChanged;

            return true;
        }

        protected override void OnDetach()
        {
            base.OnDetach();
            if (Application.Current.IsEditor) return;

            this.deleteButton.ButtonReleased -= this.DeleteButton_ButtonReleased;
            this.playButton.ButtonReleased -= this.PlayButton_ButtonReleased;
            this.recordButton.ButtonReleased -= this.RecordButton_ButtonReleased;
        }

        private void RecordingService_RecordingTimeChanged(object sender, EventArgs e)
        {
            this.recordedTimeText.Text = this.recordingService.RecordingTime.ToString("mm\\:ss");
        }

        private void PlaybackService_AudioEnd(object sender, EventArgs e)
        {
            this.WindowState = AudioNoteWindowState.ReadyToPlay;
        }

        private void UpdatePlayProgress(float progres)
        {
            throw new NotImplementedException();
        }

        private void PlaybackService_CurrentPosition(object sender, TimeSpan e)
        {
            this.playCurrentText.Text = e.ToString("mm\\:ss");
            this.playTotalText.Text = this.playbackService.Duration.ToString("mm\\:ss");

            var progres = MathHelper.Lerp(0, 1, (float)(e.TotalMilliseconds / this.playbackService.Duration.TotalMilliseconds));
            this.UpdatePlayProgress(progres);
        }

        private void RecordButton_ButtonReleased(object sender, EventArgs e)
        {
            if (this.windowState == AudioNoteWindowState.Recording)
            {
                this.WindowState = AudioNoteWindowState.StopRecording;
            }
            else
            {
                if (!string.IsNullOrEmpty(this.data.Path))
                {
                    var confirmOverride = this.xrvService.WindowSystem.ShowConfirmDialog("Override this audio?", "This action can’t be undone.", "No", "Yes");
                    confirmOverride.Closed += ConfirmOverride_Closed;
                    confirmOverride.Open();
                }
                else
                {
                    this.WindowState = AudioNoteWindowState.Recording;
                }
            }
        }

        private void PlayButton_ButtonReleased(object sender, EventArgs e)
        {
            if (this.windowState == AudioNoteWindowState.Playing)
            {
                this.WindowState = AudioNoteWindowState.StopPlaying;
            }
            else
            {
                this.WindowState = AudioNoteWindowState.Playing;
            }
        }

        private void Emitter_OnAudioEnd(object sender, Evergine.Common.Audio.AudioBuffer e)
        {
            this.WindowState = AudioNoteWindowState.StopPlaying;
        }

        private void ConfirmOverride_Closed(object sender, EventArgs e)
        {
            if (sender is Dialog dialog)
            {
                dialog.Closed -= this.ConfirmOverride_Closed;

                var isAcceted = dialog.Result == ConfirmDialog.AcceptKey;

                if (isAcceted)
                {
                    this.WindowState = AudioNoteWindowState.Recording;
                }
                else
                {
                    this.WindowState = AudioNoteWindowState.ReadyToPlay;
                }
            }
        }

        private void DeleteButton_ButtonReleased(object sender, EventArgs e)
        {
            this.xrvService.PubSub.Publish(new AudioNoteDeleteMessage()
            {
                Data = this.Data
            });
        }

        private void UpdateWindowState(AudioNoteWindowState windowState)
        {
            this.playingEntity.IsEnabled = windowState == AudioNoteWindowState.Playing;
            this.recordingEntity.IsEnabled = windowState == AudioNoteWindowState.Recording;

            this.playEntity.IsEnabled = windowState != AudioNoteWindowState.Recording;
            this.recordEntity.IsEnabled = windowState != AudioNoteWindowState.Playing;
            switch (windowState)
            {
                case AudioNoteWindowState.Recording:
                    this.playManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.recordManager.ChangeState(this.playManager.States.ElementAt(0));
                    this.BeginRecordAudionote();
                    break;
                case AudioNoteWindowState.Playing:
                    this.playManager.ChangeState(this.playManager.States.ElementAt(0));
                    this.recordManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.BeginPlayAudionote();
                    break;
                case AudioNoteWindowState.StopPlaying:
                    this.playManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.recordManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.playbackService.Stop();
                    break;
                case AudioNoteWindowState.StopRecording:
                    this.playManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.recordManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.SaveContent();
                    break;
                case AudioNoteWindowState.ReadyToPlay:
                    this.playManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.recordManager.ChangeState(this.playManager.States.ElementAt(1));
                    this.StopPlaying();
                    _ = this.StopRecording();
                    break;
                default:
                    break;
            }
        }

        private void BeginPlayAudionote()
        {
            _ = this.StartPlaying();
        }

        private async Task StartRecording()
        {
            await this.StopRecording();
            await this.recordingService.StartRecordingAsync();
        }

        private async Task StopRecording()
        {
            if (this.recordingService.IsRecording)
            {
                await this.recordingService.StopRecordingAsync();
            }
        }

        private async Task StartPlaying()
        {
            await this.StopRecording();
            this.StopPlaying();
            var stream = GetStream();
            this.playbackService.Load(stream);
            this.playbackService.Play();
        }

        private FileStream GetStream()
        {
            // TODO get real stream
            var assetsDirectory = Application.Current.Container.Resolve<AssetsDirectory>();
            var contentPath = System.IO.Path.Combine(assetsDirectory.RootPath, this.data.Path);

            return File.OpenRead(contentPath);
        }

        private void StopPlaying()
        {
            if (this.playbackService.IsPlaying)
            {
                this.playbackService.Stop();
            }
        }


        private void BeginRecordAudionote()
        {
            _ = this.StartRecording();
            // TODO begin record            
        }

        public void SaveContent()
        {
            // TODO stop record
            // TODO do save content here
            if (!string.IsNullOrEmpty(this.Data.Path))
            {
                // TODO remove previous record
            }

            _ = this.StopRecording();
            this.Data.Path = "XRV/Samples/sample.wav";
        }

        public void PlayAudio(bool play = true)
        {
            // TODO stop playing
        }
    }
}
